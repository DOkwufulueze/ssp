#!/bin/bash

helpText=;
serviceName=;

function setServiceName() {
  serviceName="$1";
  [[ "${serviceName}" =~ ".service" ]] || serviceName="${serviceName}.service";
}

function serviceStatus() {
  systemctl status "${serviceName}";
}

function fullEditService() {
  systemctl edit --full "${serviceName}" && serviceStatus "${serviceName}";
}

function enableService() {
  systemctl enable "${serviceName}" && serviceStatus "${serviceName}";
}

function disableService() {
  systemctl disable "${serviceName}" && serviceStatus "${serviceName}";
}

function startService() {
  systemctl start "${serviceName}" && serviceStatus "${serviceName}";
}

function restartService() {
  systemctl restart "${serviceName}" && serviceStatus "${serviceName}";
}

function stopService() {
  systemctl stop "${serviceName}" && serviceStatus "${serviceName}";
}

function removeService() {
  stopService "${serviceName}" && disableService "${serviceName}" && serviceStatus "${serviceName}";
}

function reAddService() {
  enableService "${serviceName}" && startService "${serviceName}" && serviceStatus "${serviceName}";
}

function reDoService() {
  stopService "${serviceName}" && disableService "${serviceName}" && fullEditService "${serviceName}" && enableService "${serviceName}" && startService "${serviceName}" && serviceStatus "${serviceName}"
}

function displayHowToUse() {
  helpText=$(cat << EOF
          Systemd Service Process

          You may need to sudo this script depeneding on the access level of your systemd services.
EOF
);
}

if [[ "$#" -gt 0 ]]; then
  while [[ "$1" != "" ]]; do
    currentOption="$1";
    case "${currentOption}" in
      --status )
        shift;
        nextOption="$1";
        case "${nextOption}" in
          - | -- | Â£ | \$ | \% | ^ | \& | \* | \( | \) | _ | = | \+ | \@ | \~ | \# | " " | [0-9]+ )
            echo "Invalid Service Name Supplied";
            exit 1;
          ;;

          *)
            setServiceName "${nextOption}";
            serviceStatus;
          ;;
        esac
      ;;

      --full-edit )
        shift;
        setServiceName "$1";
        fullEditService;
      ;;

      --enable )
        shift;
        setServiceName "$1";
        enableService;
      ;;

      --disable )
        shift;
        setServiceName "$1";
        disableService;
      ;;

      --start )
        shift;
        setServiceName "$1";
        startService;
      ;;

      --restart )
        shift;
        setServiceName "$1";
        restartService;
      ;;

      --stop )
        shift;
        setServiceName "$1";
        stopService;
      ;;

      --remove )
        shift;
        setServiceName "$1";
        removeService;
      ;;

      --re-add )
        shift;
        setServiceName "$1";
        reAddService;
      ;;

      --redo )
        shift;
        setServiceName "$1";
        reDoService;
      ;;

      --help | -h )
        displayHowToUse;
        echo "${helpText}" | less;
      ;;

      *)
        echo "Please supply a valid option";
        exit 1;
      ;;
    esac

    shift;
  done
else
  echo "Please supply arguments to ssp. Type ssp --help to see usage."
fi
